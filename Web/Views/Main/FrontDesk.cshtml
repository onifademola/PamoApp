
@{
    ViewBag.Title = "FrontDesk";
}

<script type="text/javascript">
    $(document).ready(
        function () {
            $("#txt1").html("Front Desk ");
            $("#txt2").html("(Attend to incoming Out Patients)");
            //$("#txtWarning").html("System failure imminent, carefully change COMPUTE TYPE & CLASS HIERARCHY under strict change request, and only when agreed and advised by the SCHOOL ADMINISTRATORS!");
    });
    
    $(function () {
        // Declare a proxy to reference the hub.
        var notifications = $.connection.flowQueueHub;

        //debugger;
        // Create a function that the hub can call to broadcast messages.
        notifications.client.updateMessages = function () {
            //getAllMessages()
            
            var clsRegGrid = $("#GridOnVisit").data("kendoGrid");
            clsRegGrid.dataSource.read();
            
        };

        notifications.client.updateFDMsgs = function (msg) {

            var clsRegGrid = $("#GridOnVisit").data("kendoGrid");
            clsRegGrid.dataSource.read();

            CustomQueueNotify(msg, "Out Patient Alert !");
        };

        // Start the connection.
        $.connection.hub.start().done(function () {
            //alert("connection started")
            //getAllMessages();
        }).fail(function (e) {
            //alert(e);
        });
    });

</script>

<div id="pageDP">
    <div class="col-md-4" id="pageTopLeft">

        @(Html.Kendo().Grid<Repo.DTOs.dto_Patients>()
            .ToolBar(tb => tb.Template(@<text>
            <div class="toolbar">
                @(Html.Kendo().Button()
                        .Name("iconButton")
                        .Tag("a")
                        .Icon("refresh")
                        .Content("Send selected Patient to OPD")
                        .Events(e => e.Click("btnClick"))
                    //.Content("<span class='fa-share' title='Click to run process'>Send to Consulting</span>")

                )
            </div>
            </text>))
            .Name("ptsGrid")
            .NoRecords("No patient match is found")
            .Columns(columns =>
            {
                columns.Bound(c => c.CardNumber).Width(20);
                columns.Bound(c => c.FirstName).Width(20);
                columns.Bound(c => c.LastName).Width(20);
            })
            .Filterable(f => f.Mode(GridFilterMode.Row))
            .Scrollable(sc => sc.Endless(true))
            .Sortable()
            .Selectable(selectable => selectable
            .Mode(GridSelectionMode.Single))
            .Mobile(MobileMode.Auto)
            .Pageable(p => p.Numeric(false).PreviousNext(false).Refresh(true))
            //.Pageable(pageable => pageable
            //.Refresh(true)
            //.Info(false)
            //.ButtonCount(5)
            //.PageSizes(new[] { 50, 100, 250, 500 }))
            .DataSource(dataSource => dataSource
                .Ajax()
                .Batch(false)
                .ServerOperation(false)
                .PageSize(50)
                .Events(e =>
                {
                    e.Error("error_handler");
                })
                .Model(model =>
                {
                    model.Id(p => p.ID);
                    //model.Field(p => p.StudentId).Editable(false);
                })
                .Read(read => read.Action("Patients_Read", "Patient"))
                )
        )
    </div>

    <div class="col-sm-8 col-md-8" id="pageBottomRight">
        @(Html.Kendo().Grid<Repo.Models.vwFlowQueueAttendance>()
                .Name("GridOnVisit")
                .NoRecords("No patient on visit")
                .Columns(columns =>
                {
                    columns.Bound(c => c.AttCArdNumber).Title("Card").Width(20);
                    columns.Bound(c => c.FirstName).Title("Name").Width(40);
                    columns.ForeignKey(p => p.FQCurrentSTatus, (System.Collections.IEnumerable)ViewData["vstatus"], "Key", "Value")
                    .Title("").Width(150);
                    columns.Bound(c => c.FQTimeStamp).Format("{0:dd/MM/yyyy hh:mm: tt}").Title("Date/Time").Width(80);
                    columns.Bound(c => c.FQLastUpdatedBy).Title("Action By").Width(20);
                })
                 .ToolBar(toolbar =>
                 {
                     toolbar.Pdf();
                     toolbar.Excel();
                 })
                .Scrollable(sc => sc.Endless(true))
                .Sortable()
                .Selectable(selectable => selectable
                .Mode(GridSelectionMode.Single))
                .Mobile(MobileMode.Auto)
                .Pageable(p => p.Numeric(false).PreviousNext(false).Refresh(true))
                .DataSource(dataSource => dataSource
                    .Ajax()
                    .Batch(false)
                    .ServerOperation(false)
                    .PageSize(50)
                    .Events(e =>
                    {
                        e.Error("error_handler");
                    })
                    .Model(model =>
                    {
                        model.Id(p => p.FQID);
                        //model.Field(p => p.StudentId).Editable(false);
                    })
                    .Read(read => read.Action("Read_GetAllFlowQueues", "ProcessFlow"))
                    )
        )
    </div>
</div>

@Html.Partial("~/Views/Shared/_PartialProgressBar.cshtml")

<script src="~/Scripts/appjs/frontdesk.js"></script>
<script src="~/Scripts/custom/progressBar.js"></script>