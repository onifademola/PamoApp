
@{
    ViewBag.Title = "FrontDesk";
}

<script type="text/javascript">
        $(document).ready(
            function () {
                $("#txt1").html("Front Desk ");
                $("#txt2").html("(Attend to incoming Out Patients)");
                //$("#txtWarning").html("System failure imminent, carefully change COMPUTE TYPE & CLASS HIERARCHY under strict change request, and only when agreed and advised by the SCHOOL ADMINISTRATORS!");
        });
</script>

<div id="pageDP" class="container">
    <div class="form-group" id="process">
        <button class="btn btn-block btn-info" type="submit" name="btnSubmit" id="btnSubmit" title="Click to run process">
            <i class="fa-share"></i>
            Send selected Patient(s) to OPD
        </button>
    </div>
    @(Html.Kendo().Splitter().Orientation(SplitterOrientation.Vertical)
    .Name("horizontal")
    .HtmlAttributes(new { style = "height: 580px;" }) //style = "height:580px;"
    .Panes(horizontalPanes =>
    {
    horizontalPanes.Add()
    .HtmlAttributes(new { id = "left-pane" })
    //.Size("220px")
    .Collapsible(true).Scrollable(false)
    .Content(@<div class="pane-content">
        <div id="pageGrid">
            @(Html.Kendo().Grid<Repo.DTOs.dto_Patients>()
            .Name("ptsGrid")
            .Columns(columns =>
            {
                //columns.Bound(p => p.ID).Sortable(false).Filterable(false)
                //.ClientTemplate("<input name=\"selectedPtIds\" type=\"radio\" id=\"chbox\" value=\"#=ID#\" />")
                //.HeaderTemplate("<input type='radio' id='masterCheckBox'/>").Width(10);
                columns.Bound(c => c.CardNumber).Width(20);
                columns.Bound(c => c.FirstName).Width(20);
                columns.Bound(c => c.LastName).Width(20);
            })
            //.ToolBar(toolbar =>
            //{
            //    toolbar.Create();
            //})
            .Filterable(f => f.Mode(GridFilterMode.Row))
            .Scrollable()
            .Sortable()
            .Selectable(selectable => selectable
            .Mode(GridSelectionMode.Single))
            .Mobile(MobileMode.Auto)
            .Pageable(pageable => pageable
            .Refresh(true)
            .Info(false)
            .ButtonCount(5)
            .PageSizes(new[] { 50, 100, 250, 500 }))
            .DataSource(dataSource => dataSource
            .Ajax()
            .Batch(false)
            .ServerOperation(false)
            .Events(e =>
            {
                e.Error("error_handler");
            })
            .Model(model =>
            {
                model.Id(p => p.ID);
                //model.Field(p => p.StudentId).Editable(false);
            })
            .Create(update => update.Action("Patients_Create", "Patient"))
            .Read(read => read.Action("Patients_Read", "Patient"))
            .Update(update => update.Action("Patients_BatchUpdate", "Patient"))
            .Destroy(update => update.Action("Patients_Destroy", "Patient"))
            )
            )
        </div>
    </div>);


    horizontalPanes.Add()
    .HtmlAttributes(new { id = "right-pane" })
    .Collapsible(true)
    //.MaxSize("550px")
    //.Size("550px")
    .Content(@<div class="pane-content">
        <div class="container">
            <h4>Patients on Visit</h4>
            <div id="pageGrid2">
                @(Html.Kendo().Grid<Repo.Models.vwFlowQueueAttendance>()
                .Name("Grid2")
                .Columns(columns =>
                {
                columns.Bound(c => c.AttCArdNumber).Title("").Width(20);
                columns.Bound(c => c.FirstName).Title("").Width(40);
                columns.ForeignKey(p => p.FQCurrentSTatus, (System.Collections.IEnumerable)ViewData["vstatus"], "Key", "Value")
                .Title("").Width(150);
                columns.Bound(c => c.FQTimeStamp).Format("{0:dd/MM/yyyy hh:mm: tt}").Title("").Width(20);
                columns.Bound(c => c.FQLastUpdatedBy).Title("").Width(20);
                })
                .Pageable(pageable => pageable
                    .Refresh(true)
                    .Enabled(false))
                .Scrollable()
                .Sortable()
                .Mobile(MobileMode.Auto)
                .DataSource(dataSource => dataSource
                .Ajax()
                .Batch(false)
                .ServerOperation(false)
                .Events(e =>
                {
                e.Error("error_handler");
                })
                .Model(model =>
                {
                model.Id(p => p.FQID);
                })
                .Read(read => read.Action("Read_GetAllFlowQueues", "ProcessFlow"))
                )
                )
            </div>
        </div>
    </div>);
    })
    )
</div>
@Html.Partial("~/Views/Shared/_PartialProgressBar.cshtml")

<script src="~/Scripts/custom/progressBar.js"></script>
<script type="text/javascript">
    function error_handler(e) {
        if (e.errors) {
            var message = "Errors:\n";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "\n";
                    });
                }
            });
            alert(message);
        }
    }

    //$("#masterCheckBox").click(function () {
    //    if (document.getElementById('masterCheckBox').checked) {

    //        $('tr').find('[type=checkbox]').prop('checked', true);
    //        $('tr.k-state-selected').find('[type=checkbox]').prop('checked', true);
    //    }
    //    else {
    //        $('tr').find('[type=checkbox]').prop('checked', false);
    //        $('tr.k-state-selected').find('[type=checkbox]').prop('checked', false);
    //    }
    //});

    $("#btnSubmit").click(function () {
        var data = { };
        
        var grid = $("#ptsGrid").data("kendoGrid");
        var selectedItem = grid.dataItem(grid.select());
        console.log(selectedItem);
        if (selectedItem == null) {
            CustomErrorNotify("Sorry! You have not selected a Patient");
        }
        data = { "selectedPtIds": selectedItem.ID };
        console.log(data);

        //post the selected items and the selected value
        beginProgress();
        $.post("/Main/SendToOPD", data)
            .done(function (result) {
                endProgress();

                if (result[0].resp == "ok") {
                    CustomSuccessNotify(result[0].mesag, "Patient has been sent to OPD !");
                }
                else {
                    CustomErrorNotify(result[0].mesag, "Sorry! There is a process glitch! We could not send Patient to OPD. Contact your Administrator");
                }
            }
            ).error( function (xhr, ajaxOptions, thrownError) {
                endProgress();
                ServiceError();
                }
        );

        //beginProgress();

        //$.ajax({
        //    cache: false,
        //    type: "GET",
        //    contentType: "application/json; charset=utf-8",
        //    dataType: 'json',
        //    url: "/Main/SendToOPD",
        //    data: data,
        //    success: function (result) {
        //        endProgress();

        //        if (result[0].resp == "ok") {
        //            CustomSuccessNotify(result[0].mesag, "Registration successful !");
        //        }
        //        else {
        //            CustomErrorNotify(result[0].mesag, "Registration failed !");
        //        }
        //    },
        //    error: function (xhr, ajaxOptions, thrownError) {
        //        endProgress();
        //        ServiceError();
        //    }
        //});
    });
</script>