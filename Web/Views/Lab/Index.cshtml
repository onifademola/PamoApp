@using Kendo.Mvc
@{
    ViewBag.Title = "Labs";
}

<script type="text/javascript">
        $(document).ready(
            function () {
                $("#txt1").html("LABS ");
                $("#txt2").html("(Manage active Students info)");
                //$("#txtWarning").html("System failure imminent, carefully change COMPUTE TYPE & CLASS HIERARCHY under strict change request, and only when agreed and advised by the SCHOOL ADMINISTRATORS!");
        });
</script>

<div class="row">
    <div class="col-md-4">

    </div>

    <div class="col-md-12" id="pageGrid">
        @(Html.Kendo().Grid<Repo.Models.labw>()
        .Name("labGrid")
        .Columns(columns =>
        {
            //columns.Select();
            columns.Bound(p => p.ID).Sortable(false).Filterable(false)//.Title("Select")//.ClientTemplate("<input type='checkbox' />")
                .ClientTemplate("<input name=\"selectedTchLogIds\" type=\"checkbox\" id=\"chbox\" value=\"#=ID#\" />")
            //.HeaderTemplate("<input type=\"checkbox\" class=\"selectAll\" />")
            //.HeaderTemplate("<input class=\"selectAll\" type=\"checkbox\" id=\"allBox\" onclick=\"toggleSelection()\" />").Width(20)
            .HeaderTemplate("<input type='checkbox' id='masterCheckBox'/>").Width(60) //onclick='checkAll(this)'
            .Locked().Lockable(true);


            columns.Bound(c => c.Card).Locked().Lockable(true).Width(120);
            columns.Bound(c => c.Remarks).Locked().Lockable(true).Width(120);
            columns.Bound(c => c.wAH).Width(120);
            columns.Bound(c => c.wAO).Width(60);
            //columns.ForeignKey(p => p.LastSessionID, (System.Collections.IEnumerable)ViewData["sessns"], "SessionId", "SessionName")
            //.Title("Last Session").Width(80);
            //columns.ForeignKey(p => p.LastTermID, (System.Collections.IEnumerable)ViewData["trms"], "TermId", "TermDescription")
            //.Title("Last Term").Width(120);
            //columns.ForeignKey(p => p.LastClassID, (System.Collections.IEnumerable)ViewData["cls"], "ClassArmId", "ClassArm")
            //.Title("Last Class").Width(150);
            //columns.ForeignKey(c => c.Status, (System.Collections.IEnumerable)ViewData["studStat"], "Value", "Text").Title("Status").Width(100);
            columns.Bound(c => c.Date).Width(100).Format("{0:dd/MM/yyyy}");
            columns.Bound(c => c.wBH).Width(100);
            columns.Bound(c => c.wBO).Width(100);
            columns.Bound(c => c.wCH).Width(100);
            columns.Bound(c => c.wCO).Width(100);
            columns.Bound(c => c.wElisa).Width(100);
            columns.Bound(c => c.wH).Width(100);
            columns.Bound(c => c.wO).Width(100);

            //columns.Bound(p => p.StudentId).Width(120).Title("Change Photo").Lockable(true).Sortable(false).Filterable(false)
            //            .ClientTemplate("<a href='" + Url.Action("Edit", "Student") + "/#=StudentId#'>Photo Edit</a>");
            //columns.Command(c => { c.Edit(); c.Destroy(); }).Width(172);
        })
        .ToolBar(toolbar =>
        {
            toolbar.Create();
            toolbar.Save();
            toolbar.Excel();
        })
                .ColumnMenu()
                .HtmlAttributes(new { style = "height:580px;" })
                .Editable(editable => editable.Mode(GridEditMode.InCell))
                .Filterable(ftb => ftb.Mode(GridFilterMode.Menu))
                .Scrollable()
                .Groupable()
                .Sortable()
                        .Selectable(selectable => selectable
                    .Mode(GridSelectionMode.Single))

                .Resizable(r => r.Columns(true))
                .Excel(excel => excel
                    .FileName("ActiveStudentList.xlsx")
                    .Filterable(true)
                    .AllPages(true)
                    .ProxyURL(Url.Action("Excel_Export_Save", "Score"))
                )
                .Pageable(pageable => pageable
                    .Refresh(true)
                    .PageSizes(new[] { 5, 10, 25, 50, 100 }))
                            //.ButtonCount(5))
                            //.Pageable(p => p.PageSizes(new[] { 10, 25, 50, 100 }))
                            .DataSource(dataSource => dataSource
                            .Ajax()
                            .Batch(true)
                            .ServerOperation(false)
                            .Events(e =>
                            {
                                e.Error("error_handler");
                            })
                                    .Model(model =>
                                    {
                                        model.Id(p => p.ID);
                                        //model.Field(p => p.StudentId).Editable(false);
                                    })
                                    .Create(update => update.Action("labws_Create", "Lab"))
                                            .Read(read => read.Action("labws_Read", "Lab"))
                                            .Update(update => update.Action("labws_BatchUpdate", "Lab"))
                                            .Destroy(update => update.Action("labws_Destroy", "Lab"))
                )
        )
    </div>
</div>

<script>
    function error_handler(e) {
        if (e.errors) {
            var message = "Errors:\n";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "\n";
                    });
                }
            });
            alert(message);
        }
    };
</script>